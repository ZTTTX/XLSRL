package my_package

file_number 1 "././work_space/test.cc"

top fn AddAssociativity(x1: bits[32], y1: bits[32], z1: bits[32]) -> bits[32] {
  add.75: bits[32] = add(z1, x1, id=75)
  ret add.76: bits[32] = add(add.75, y1, id=76)
}

fn Unsigned_MulAssociativity(x2: bits[32], y2: bits[32], z2: bits[32]) -> bits[32] {
  umul.79: bits[32] = umul(z2, x2, id=79)
  ret umul.80: bits[32] = umul(umul.79, y2, id=80)
}

fn MulDistribution(x3: bits[32], y3: bits[32], z3: bits[32]) -> bits[32] {
  add.83: bits[32] = add(z3, x3, id=83)
  ret umul.84: bits[32] = umul(add.83, y3, id=84)
}

fn SumSame(x4: bits[32]) -> bits[32] {
  ret add.7: bits[32] = add(x4, x4, id=7)
}

fn MulSumSame(x5: bits[32], y5: bits[32], z5: bits[32]) -> bits[32] {
  umul.91: bits[32] = umul(y5, x5, id=91)
  umul.87: bits[32] = umul(x5, y5, id=87)
  add.92: bits[32] = add(umul.91, z5, id=92)
  ret add.88: bits[32] = add(umul.87, y5, id=88)
}

fn Signed_MulAssociativity(x6: bits[32], y6: bits[32], z6: bits[32]) -> bits[32] {
  smul.95: bits[32] = smul(z6, x6, id=95)
  ret smul.96: bits[32] = smul(smul.95, y6, id=96)
}

fn SubToNeg(x7: bits[32], y7: bits[32]) -> bits[32] {
  ret sub.14: bits[32] = sub(x7, y7, id=14)
}

fn MulByTwo(x8: bits[32]) -> bits[32] {
  literal.15: bits[8] = literal(value=4, id=15)
  literal.17: bits[2] = literal(value=2, id=17)
  umul.16: bits[32] = umul(x8, literal.15, id=16)
  ret umul.18: bits[32] = umul(x8, literal.17, id=18)
}

fn MergeLeftRightShift(x9: bits[32], y9: bits[32], z9: bits[32]) -> bits[32] {
  shll.99: bits[32] = shll(x9, y9, id=99)
  shll.103: bits[32] = shll(x9, y9, id=103)
  shll.100: bits[32] = shll(shll.99, z9, id=100)
  shll.104: bits[32] = shll(shll.103, z9, id=104)
  ret literal.23: bits[32] = literal(value=1, id=23)
}

fn NegToNot(x10: bits[32]) -> bits[32] {
  ret neg.24: bits[32] = neg(x10, id=24)
}

fn NotOverConcat(x11: bits[4], y11: bits[4], z11: bits[4], v11: bits[4]) -> bits[16] {
  concat.25: bits[16] = concat(x11, y11, z11, v11, id=25)
  ret not.26: bits[16] = not(concat.25, id=26)
}

fn CoreDump(x12: bits[32], y12: bits[32], z12: bits[32]) -> bits[32] {
  add.107: bits[32] = add(z12, x12, id=107)
  add.108: bits[32] = add(add.107, y12, id=108)
  ret add.109: bits[32] = add(add.108, y12, id=109)
}

fn MoreThanOneRef(x13: bits[32], y13: bits[32], z13: bits[32]) -> bits[64] {
  add.30: bits[32] = add(z13, x13, id=30)
  add.31: bits[32] = add(add.30, y13, id=31)
  concat.32: bits[64] = concat(add.30, add.31, id=32)
  concat.33: bits[64] = concat(add.30, x13, id=33)
  ret add.34: bits[64] = add(concat.32, concat.33, id=34)
}

fn UnsupportRef(x14: bits[32], y14: bits[64], z14: bits[32]) -> bits[32] {
  literal.36: bits[32] = literal(value=123, id=36)
  bit_slice.37: bits[32] = bit_slice(y14, start=0, width=32, id=37)
  add.35: bits[32] = add(z14, x14, id=35)
  ret add.38: bits[32] = add(literal.36, bit_slice.37, id=38)
}
