package my_package

file_number 1 "././work_space/test.cc"

top fn AddAssociativity(x1: bits[32], y1: bits[32], z1: bits[32]) -> bits[32] {
  add.75: bits[32] = add(x1, y1, id=75)
  ret add.76: bits[32] = add(add.75, z1, id=76)
}

fn Unsigned_MulAssociativity(x2: bits[32], y2: bits[32], z2: bits[32]) -> bits[32] {
  umul.79: bits[32] = umul(x2, y2, id=79)
  ret umul.80: bits[32] = umul(umul.79, z2, id=80)
}

fn MulDistribution(x3: bits[32], y3: bits[32], z3: bits[32]) -> bits[32] {
  add.83: bits[32] = add(z3, x3, id=83)
  ret umul.84: bits[32] = umul(y3, add.83, id=84)
}

fn SumSame(x4: bits[32]) -> bits[32] {
  bit_slice.158: bits[31] = bit_slice(x4, start=0, width=31, id=158)
  literal.157: bits[1] = literal(value=0, id=157)
  ret concat.159: bits[32] = concat(bit_slice.158, literal.157, id=159)
}

fn MulSumSame(x5: bits[32], y5: bits[32], z5: bits[32]) -> bits[32] {
  literal.90: bits[32] = literal(value=1, id=90)
  add.154: bits[32] = add(x5, literal.90, id=154)
  ret umul.92: bits[32] = umul(add.154, y5, id=92)
}

fn Signed_MulAssociativity(x6: bits[32], y6: bits[32], z6: bits[32]) -> bits[32] {
  smul.99: bits[32] = smul(x6, y6, id=99)
  ret smul.100: bits[32] = smul(smul.99, z6, id=100)
}

fn SubToNeg(x7: bits[32], y7: bits[32]) -> bits[32] {
  not.104: bits[32] = not(y7, id=104)
  add.105: bits[32] = add(not.104, x7, id=105)
  literal.103: bits[32] = literal(value=1, id=103)
  ret add.106: bits[32] = add(add.105, literal.103, id=106)
}

fn MulByTwo(x8: bits[32]) -> bits[32] {
  bit_slice.163: bits[31] = bit_slice(x8, start=0, width=31, id=163)
  literal.162: bits[1] = literal(value=0, id=162)
  ret concat.164: bits[32] = concat(bit_slice.163, literal.162, id=164)
}

fn MergeLeftRightShift(x9: bits[32], y9: bits[32], z9: bits[32]) -> bits[32] {
  ret literal.23: bits[32] = literal(value=1, id=23)
}

fn NegToNot(x10: bits[32]) -> bits[32] {
  not.121: bits[32] = not(x10, id=121)
  literal.120: bits[32] = literal(value=1, id=120)
  ret add.156: bits[32] = add(not.121, literal.120, id=156)
}

fn NotOverConcat(x11: bits[4], y11: bits[4], z11: bits[4], v11: bits[4]) -> bits[16] {
  not.175: bits[4] = not(x11, id=175)
  not.173: bits[4] = not(y11, id=173)
  not.171: bits[4] = not(z11, id=171)
  not.169: bits[4] = not(v11, id=169)
  ret concat.176: bits[16] = concat(not.175, not.173, not.171, not.169, id=176)
}

fn CoreDump(x12: bits[32], y12: bits[32], z12: bits[32]) -> bits[32] {
  add.165: bits[32] = add(y12, x12, id=165)
  add.166: bits[32] = add(y12, z12, id=166)
  ret add.167: bits[32] = add(add.165, add.166, id=167)
}

fn MoreThanOneRef(x13: bits[32], y13: bits[32], z13: bits[32]) -> bits[64] {
  add.136: bits[32] = add(x13, z13, id=136)
  add.134: bits[32] = add(y13, add.136, id=134)
  concat.33: bits[64] = concat(add.136, x13, id=33)
  concat.32: bits[64] = concat(add.136, add.134, id=32)
  ret add.132: bits[64] = add(concat.33, concat.32, id=132)
}

fn UnsupportRef(x14: bits[32], y14: bits[64], z14: bits[32]) -> bits[32] {
  bit_slice.37: bits[32] = bit_slice(y14, start=0, width=32, id=37)
  literal.36: bits[32] = literal(value=123, id=36)
  ret add.138: bits[32] = add(bit_slice.37, literal.36, id=138)
}

block xls_test(clk: clock, x1: bits[32], y1: bits[32], z1: bits[32], out: bits[32]) {
  reg p0_x1(bits[32])
  reg p0_y1(bits[32])
  reg p0_z1(bits[32])
  reg p1_z1(bits[32])
  reg p1_add_190(bits[32])
  reg p2_add_195(bits[32])
  x1: bits[32] = input_port(name=x1, id=181)
  y1: bits[32] = input_port(name=y1, id=182)
  z1: bits[32] = input_port(name=z1, id=183)
  register_write.184: () = register_write(x1, register=p0_x1, id=184)
  register_write.186: () = register_write(y1, register=p0_y1, id=186)
  register_write.188: () = register_write(z1, register=p0_z1, id=188)
  p0_x1: bits[32] = register_read(register=p0_x1, id=185)
  p0_y1: bits[32] = register_read(register=p0_y1, id=187)
  p0_z1: bits[32] = register_read(register=p0_z1, id=189)
  add.190: bits[32] = add(p0_x1, p0_y1, id=190)
  register_write.191: () = register_write(p0_z1, register=p1_z1, id=191)
  register_write.193: () = register_write(add.190, register=p1_add_190, id=193)
  p1_z1: bits[32] = register_read(register=p1_z1, id=192)
  p1_add_190: bits[32] = register_read(register=p1_add_190, id=194)
  add.195: bits[32] = add(p1_add_190, p1_z1, id=195)
  register_write.196: () = register_write(add.195, register=p2_add_195, id=196)
  p2_add_195: bits[32] = register_read(register=p2_add_195, id=197)
  out: () = output_port(p2_add_195, name=out, id=198)
}
