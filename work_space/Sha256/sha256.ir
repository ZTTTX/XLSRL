package sha256

file_number 0 "xls/dslx/stdlib/std.x"
file_number 1 "./work_space/Sha256/sha256.x"

fn __std__rrot__32(x: bits[32], y: bits[32]) -> bits[32] {
  N: bits[32] = literal(value=32, id=3, pos=[(0,322,12)])
  zero_ext.5: bits[32] = zero_ext(N, new_bit_count=32, id=5)
  sub.6: bits[32] = sub(zero_ext.5, y, id=6, pos=[(0,323,35)])
  shrl.4: bits[32] = shrl(x, y, id=4, pos=[(0,323,5)])
  shll.7: bits[32] = shll(x, sub.6, id=7, pos=[(0,323,16)])
  ret or.8: bits[32] = or(shrl.4, shll.7, id=8, pos=[(0,323,11)])
}

fn ____sha256__sha256_chunk_w_table_counted_for_0_body(i: bits[32], w: bits[32][64]) -> bits[32][64] {
  literal.78: bits[32] = literal(value=0, id=78)
  add.79: bits[32] = add(i, literal.78, id=79)
  literal.81: bits[32] = literal(value=16, id=81, pos=[(1,35,32)])
  add.82: bits[32] = add(add.79, literal.81, id=82, pos=[(1,35,26)])
  literal.83: bits[32] = literal(value=15, id=83, pos=[(1,35,41)])
  sub.84: bits[32] = sub(add.82, literal.83, id=84, pos=[(1,35,35)])
  literal.94: bits[32] = literal(value=16, id=94, pos=[(1,39,31)])
  literal.107: bits[32] = literal(value=16, id=107, pos=[(1,43,31)])
  w_im15: bits[32] = array_index(w, indices=[sub.84], id=85, pos=[(1,35,23)])
  literal.86: bits[32] = literal(value=7, id=86, pos=[(1,36,41)])
  literal.88: bits[32] = literal(value=18, id=88, pos=[(1,37,40)])
  add.95: bits[32] = add(add.79, literal.94, id=95, pos=[(1,39,25)])
  literal.96: bits[32] = literal(value=2, id=96, pos=[(1,39,40)])
  add.108: bits[32] = add(add.79, literal.107, id=108, pos=[(1,43,25)])
  literal.109: bits[32] = literal(value=16, id=109, pos=[(1,43,40)])
  invoke.87: bits[32] = invoke(w_im15, literal.86, to_apply=__std__rrot__32, id=87, pos=[(1,36,28)])
  invoke.89: bits[32] = invoke(w_im15, literal.88, to_apply=__std__rrot__32, id=89, pos=[(1,37,27)])
  literal.91: bits[32] = literal(value=3, id=91, pos=[(1,38,33)])
  literal.113: bits[32] = literal(value=16, id=113, pos=[(1,43,62)])
  sub.97: bits[32] = sub(add.95, literal.96, id=97, pos=[(1,39,34)])
  sub.110: bits[32] = sub(add.108, literal.109, id=110, pos=[(1,43,34)])
  xor.90: bits[32] = xor(invoke.87, invoke.89, id=90, pos=[(1,37,16)])
  shrl.92: bits[32] = shrl(w_im15, literal.91, id=92, pos=[(1,38,26)])
  add.114: bits[32] = add(add.79, literal.113, id=114, pos=[(1,43,56)])
  literal.115: bits[32] = literal(value=7, id=115, pos=[(1,43,71)])
  w_im2: bits[32] = array_index(w, indices=[sub.97], id=98, pos=[(1,39,22)])
  literal.99: bits[32] = literal(value=17, id=99, pos=[(1,40,40)])
  literal.101: bits[32] = literal(value=19, id=101, pos=[(1,41,39)])
  array_index.111: bits[32] = array_index(w, indices=[sub.110], id=111, pos=[(1,43,22)])
  s_0: bits[32] = xor(xor.90, shrl.92, id=93, pos=[(1,38,16)])
  sub.116: bits[32] = sub(add.114, literal.115, id=116, pos=[(1,43,65)])
  invoke.100: bits[32] = invoke(w_im2, literal.99, to_apply=__std__rrot__32, id=100, pos=[(1,40,28)])
  invoke.102: bits[32] = invoke(w_im2, literal.101, to_apply=__std__rrot__32, id=102, pos=[(1,41,27)])
  literal.104: bits[32] = literal(value=10, id=104, pos=[(1,42,32)])
  add.112: bits[32] = add(array_index.111, s_0, id=112, pos=[(1,43,44)])
  array_index.117: bits[32] = array_index(w, indices=[sub.116], id=117, pos=[(1,43,53)])
  xor.103: bits[32] = xor(invoke.100, invoke.102, id=103, pos=[(1,41,16)])
  shrl.105: bits[32] = shrl(w_im2, literal.104, id=105, pos=[(1,42,25)])
  add.118: bits[32] = add(add.112, array_index.117, id=118, pos=[(1,43,50)])
  s_1: bits[32] = xor(xor.103, shrl.105, id=106, pos=[(1,42,16)])
  literal.120: bits[32] = literal(value=16, id=120, pos=[(1,44,22)])
  value: bits[32] = add(add.118, s_1, id=119, pos=[(1,43,74)])
  add.121: bits[32] = add(add.79, literal.120, id=121, pos=[(1,44,16)])
  ret array_update.122: bits[32][64] = array_update(w, value, indices=[add.121], id=122, pos=[(1,44,10)])
}

fn __sha256__sha256_chunk_w_table(chunk: bits[512]) -> bits[32][64] {
  literal.10: bits[1536] = literal(value=0x0, id=10, pos=[(1,29,45)])
  concat.11: bits[2048] = concat(chunk, literal.10, id=11, pos=[(1,29,31)])
  bit_slice.75: bits[32] = bit_slice(concat.11, start=2016, width=32, id=75)
  bit_slice.74: bits[32] = bit_slice(concat.11, start=1984, width=32, id=74)
  bit_slice.73: bits[32] = bit_slice(concat.11, start=1952, width=32, id=73)
  bit_slice.72: bits[32] = bit_slice(concat.11, start=1920, width=32, id=72)
  bit_slice.71: bits[32] = bit_slice(concat.11, start=1888, width=32, id=71)
  bit_slice.70: bits[32] = bit_slice(concat.11, start=1856, width=32, id=70)
  bit_slice.69: bits[32] = bit_slice(concat.11, start=1824, width=32, id=69)
  bit_slice.68: bits[32] = bit_slice(concat.11, start=1792, width=32, id=68)
  bit_slice.67: bits[32] = bit_slice(concat.11, start=1760, width=32, id=67)
  bit_slice.66: bits[32] = bit_slice(concat.11, start=1728, width=32, id=66)
  bit_slice.65: bits[32] = bit_slice(concat.11, start=1696, width=32, id=65)
  bit_slice.64: bits[32] = bit_slice(concat.11, start=1664, width=32, id=64)
  bit_slice.63: bits[32] = bit_slice(concat.11, start=1632, width=32, id=63)
  bit_slice.62: bits[32] = bit_slice(concat.11, start=1600, width=32, id=62)
  bit_slice.61: bits[32] = bit_slice(concat.11, start=1568, width=32, id=61)
  bit_slice.60: bits[32] = bit_slice(concat.11, start=1536, width=32, id=60)
  bit_slice.59: bits[32] = bit_slice(concat.11, start=1504, width=32, id=59)
  bit_slice.58: bits[32] = bit_slice(concat.11, start=1472, width=32, id=58)
  bit_slice.57: bits[32] = bit_slice(concat.11, start=1440, width=32, id=57)
  bit_slice.56: bits[32] = bit_slice(concat.11, start=1408, width=32, id=56)
  bit_slice.55: bits[32] = bit_slice(concat.11, start=1376, width=32, id=55)
  bit_slice.54: bits[32] = bit_slice(concat.11, start=1344, width=32, id=54)
  bit_slice.53: bits[32] = bit_slice(concat.11, start=1312, width=32, id=53)
  bit_slice.52: bits[32] = bit_slice(concat.11, start=1280, width=32, id=52)
  bit_slice.51: bits[32] = bit_slice(concat.11, start=1248, width=32, id=51)
  bit_slice.50: bits[32] = bit_slice(concat.11, start=1216, width=32, id=50)
  bit_slice.49: bits[32] = bit_slice(concat.11, start=1184, width=32, id=49)
  bit_slice.48: bits[32] = bit_slice(concat.11, start=1152, width=32, id=48)
  bit_slice.47: bits[32] = bit_slice(concat.11, start=1120, width=32, id=47)
  bit_slice.46: bits[32] = bit_slice(concat.11, start=1088, width=32, id=46)
  bit_slice.45: bits[32] = bit_slice(concat.11, start=1056, width=32, id=45)
  bit_slice.44: bits[32] = bit_slice(concat.11, start=1024, width=32, id=44)
  bit_slice.43: bits[32] = bit_slice(concat.11, start=992, width=32, id=43)
  bit_slice.42: bits[32] = bit_slice(concat.11, start=960, width=32, id=42)
  bit_slice.41: bits[32] = bit_slice(concat.11, start=928, width=32, id=41)
  bit_slice.40: bits[32] = bit_slice(concat.11, start=896, width=32, id=40)
  bit_slice.39: bits[32] = bit_slice(concat.11, start=864, width=32, id=39)
  bit_slice.38: bits[32] = bit_slice(concat.11, start=832, width=32, id=38)
  bit_slice.37: bits[32] = bit_slice(concat.11, start=800, width=32, id=37)
  bit_slice.36: bits[32] = bit_slice(concat.11, start=768, width=32, id=36)
  bit_slice.35: bits[32] = bit_slice(concat.11, start=736, width=32, id=35)
  bit_slice.34: bits[32] = bit_slice(concat.11, start=704, width=32, id=34)
  bit_slice.33: bits[32] = bit_slice(concat.11, start=672, width=32, id=33)
  bit_slice.32: bits[32] = bit_slice(concat.11, start=640, width=32, id=32)
  bit_slice.31: bits[32] = bit_slice(concat.11, start=608, width=32, id=31)
  bit_slice.30: bits[32] = bit_slice(concat.11, start=576, width=32, id=30)
  bit_slice.29: bits[32] = bit_slice(concat.11, start=544, width=32, id=29)
  bit_slice.28: bits[32] = bit_slice(concat.11, start=512, width=32, id=28)
  bit_slice.27: bits[32] = bit_slice(concat.11, start=480, width=32, id=27)
  bit_slice.26: bits[32] = bit_slice(concat.11, start=448, width=32, id=26)
  bit_slice.25: bits[32] = bit_slice(concat.11, start=416, width=32, id=25)
  bit_slice.24: bits[32] = bit_slice(concat.11, start=384, width=32, id=24)
  bit_slice.23: bits[32] = bit_slice(concat.11, start=352, width=32, id=23)
  bit_slice.22: bits[32] = bit_slice(concat.11, start=320, width=32, id=22)
  bit_slice.21: bits[32] = bit_slice(concat.11, start=288, width=32, id=21)
  bit_slice.20: bits[32] = bit_slice(concat.11, start=256, width=32, id=20)
  bit_slice.19: bits[32] = bit_slice(concat.11, start=224, width=32, id=19)
  bit_slice.18: bits[32] = bit_slice(concat.11, start=192, width=32, id=18)
  bit_slice.17: bits[32] = bit_slice(concat.11, start=160, width=32, id=17)
  bit_slice.16: bits[32] = bit_slice(concat.11, start=128, width=32, id=16)
  bit_slice.15: bits[32] = bit_slice(concat.11, start=96, width=32, id=15)
  bit_slice.14: bits[32] = bit_slice(concat.11, start=64, width=32, id=14)
  bit_slice.13: bits[32] = bit_slice(concat.11, start=32, width=32, id=13)
  bit_slice.12: bits[32] = bit_slice(concat.11, start=0, width=32, id=12)
  w_init: bits[32][64] = array(bit_slice.75, bit_slice.74, bit_slice.73, bit_slice.72, bit_slice.71, bit_slice.70, bit_slice.69, bit_slice.68, bit_slice.67, bit_slice.66, bit_slice.65, bit_slice.64, bit_slice.63, bit_slice.62, bit_slice.61, bit_slice.60, bit_slice.59, bit_slice.58, bit_slice.57, bit_slice.56, bit_slice.55, bit_slice.54, bit_slice.53, bit_slice.52, bit_slice.51, bit_slice.50, bit_slice.49, bit_slice.48, bit_slice.47, bit_slice.46, bit_slice.45, bit_slice.44, bit_slice.43, bit_slice.42, bit_slice.41, bit_slice.40, bit_slice.39, bit_slice.38, bit_slice.37, bit_slice.36, bit_slice.35, bit_slice.34, bit_slice.33, bit_slice.32, bit_slice.31, bit_slice.30, bit_slice.29, bit_slice.28, bit_slice.27, bit_slice.26, bit_slice.25, bit_slice.24, bit_slice.23, bit_slice.22, bit_slice.21, bit_slice.20, bit_slice.19, bit_slice.18, bit_slice.17, bit_slice.16, bit_slice.15, bit_slice.14, bit_slice.13, bit_slice.12, id=76, pos=[(1,29,31)])
  ret w: bits[32][64] = counted_for(w_init, trip_count=48, stride=1, body=____sha256__sha256_chunk_w_table_counted_for_0_body, id=123)
}

fn ____sha256__sha256_chunk_counted_for_0_body(i: bits[32], __loop_carry: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]), K: bits[32][64], w: bits[32][64]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  tuple_index.209: bits[32] = tuple_index(__loop_carry, index=4, id=209)
  literal.223: bits[32] = literal(value=6, id=223, pos=[(1,77,30)])
  literal.225: bits[32] = literal(value=11, id=225, pos=[(1,77,52)])
  literal.196: bits[1] = literal(value=1, id=196)
  literal.198: bits[1] = literal(value=1, id=198)
  invoke.224: bits[32] = invoke(tuple_index.209, literal.223, to_apply=__std__rrot__32, id=224, pos=[(1,77,22)])
  invoke.226: bits[32] = invoke(tuple_index.209, literal.225, to_apply=__std__rrot__32, id=226, pos=[(1,77,44)])
  literal.228: bits[32] = literal(value=25, id=228, pos=[(1,77,75)])
  and.199: bits[1] = and(literal.196, literal.198, id=199)
  literal.201: bits[1] = literal(value=1, id=201)
  xor.227: bits[32] = xor(invoke.224, invoke.226, id=227, pos=[(1,77,33)])
  invoke.229: bits[32] = invoke(tuple_index.209, literal.228, to_apply=__std__rrot__32, id=229, pos=[(1,77,67)])
  tuple_index.212: bits[32] = tuple_index(__loop_carry, index=5, id=212)
  not.232: bits[32] = not(tuple_index.209, id=232, pos=[(1,78,25)])
  tuple_index.215: bits[32] = tuple_index(__loop_carry, index=6, id=215)
  and.202: bits[1] = and(and.199, literal.201, id=202)
  literal.204: bits[1] = literal(value=1, id=204)
  tuple_index.218: bits[32] = tuple_index(__loop_carry, index=7, id=218)
  S1: bits[32] = xor(xor.227, invoke.229, id=230, pos=[(1,77,56)])
  and.231: bits[32] = and(tuple_index.209, tuple_index.212, id=231, pos=[(1,78,16)])
  and.233: bits[32] = and(not.232, tuple_index.215, id=233, pos=[(1,78,29)])
  literal.193: bits[32] = literal(value=0, id=193)
  tuple_index.197: bits[32] = tuple_index(__loop_carry, index=0, id=197)
  literal.241: bits[32] = literal(value=2, id=241, pos=[(1,80,30)])
  literal.243: bits[32] = literal(value=13, id=243, pos=[(1,80,52)])
  tuple_index.200: bits[32] = tuple_index(__loop_carry, index=1, id=200)
  tuple_index.203: bits[32] = tuple_index(__loop_carry, index=2, id=203)
  and.205: bits[1] = and(and.202, literal.204, id=205)
  literal.207: bits[1] = literal(value=1, id=207)
  add.235: bits[32] = add(tuple_index.218, S1, id=235, pos=[(1,79,18)])
  ch: bits[32] = xor(and.231, and.233, id=234, pos=[(1,78,21)])
  add.194: bits[32] = add(i, literal.193, id=194)
  invoke.242: bits[32] = invoke(tuple_index.197, literal.241, to_apply=__std__rrot__32, id=242, pos=[(1,80,22)])
  invoke.244: bits[32] = invoke(tuple_index.197, literal.243, to_apply=__std__rrot__32, id=244, pos=[(1,80,44)])
  literal.246: bits[32] = literal(value=22, id=246, pos=[(1,80,75)])
  and.249: bits[32] = and(tuple_index.197, tuple_index.200, id=249, pos=[(1,81,17)])
  and.250: bits[32] = and(tuple_index.197, tuple_index.203, id=250, pos=[(1,81,27)])
  and.208: bits[1] = and(and.205, literal.207, id=208)
  literal.210: bits[1] = literal(value=1, id=210)
  add.236: bits[32] = add(add.235, ch, id=236, pos=[(1,79,23)])
  array_index.237: bits[32] = array_index(K, indices=[add.194], id=237, pos=[(1,79,31)])
  xor.245: bits[32] = xor(invoke.242, invoke.244, id=245, pos=[(1,80,33)])
  invoke.247: bits[32] = invoke(tuple_index.197, literal.246, to_apply=__std__rrot__32, id=247, pos=[(1,80,67)])
  xor.251: bits[32] = xor(and.249, and.250, id=251, pos=[(1,81,22)])
  and.252: bits[32] = and(tuple_index.200, tuple_index.203, id=252, pos=[(1,81,37)])
  and.211: bits[1] = and(and.208, literal.210, id=211)
  literal.213: bits[1] = literal(value=1, id=213)
  add.238: bits[32] = add(add.236, array_index.237, id=238, pos=[(1,79,28)])
  array_index.239: bits[32] = array_index(w, indices=[add.194], id=239, pos=[(1,79,38)])
  S0: bits[32] = xor(xor.245, invoke.247, id=248, pos=[(1,80,56)])
  maj: bits[32] = xor(xor.251, and.252, id=253, pos=[(1,81,32)])
  and.214: bits[1] = and(and.211, literal.213, id=214)
  literal.216: bits[1] = literal(value=1, id=216)
  temp1: bits[32] = add(add.238, array_index.239, id=240, pos=[(1,79,35)])
  temp2: bits[32] = add(S0, maj, id=254, pos=[(1,82,19)])
  tuple.260: (bits[32], bits[32], bits[32]) = tuple(tuple_index.203, tuple_index.200, tuple_index.197, id=260, pos=[(1,85,20)])
  tuple_index.206: bits[32] = tuple_index(__loop_carry, index=3, id=206)
  tuple.255: (bits[32], bits[32], bits[32]) = tuple(tuple_index.215, tuple_index.212, tuple_index.209, id=255, pos=[(1,83,20)])
  and.217: bits[1] = and(and.214, literal.216, id=217)
  literal.219: bits[1] = literal(value=1, id=219)
  a: bits[32] = add(temp1, temp2, id=264, pos=[(1,86,18)])
  b: bits[32] = tuple_index(tuple.260, index=2, id=263, pos=[(1,85,15)])
  c: bits[32] = tuple_index(tuple.260, index=1, id=262, pos=[(1,85,12)])
  d: bits[32] = tuple_index(tuple.260, index=0, id=261, pos=[(1,85,9)])
  e: bits[32] = add(tuple_index.206, temp1, id=259, pos=[(1,84,14)])
  f: bits[32] = tuple_index(tuple.255, index=2, id=258, pos=[(1,83,15)])
  g: bits[32] = tuple_index(tuple.255, index=1, id=257, pos=[(1,83,12)])
  h: bits[32] = tuple_index(tuple.255, index=0, id=256, pos=[(1,83,9)])
  and.220: bits[1] = and(and.217, literal.219, id=220)
  ret tuple.265: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(a, b, c, d, e, f, g, h, id=265, pos=[(1,87,4)])
}

fn __sha256__sha256_chunk(chunk: bits[512], digest_init: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32])) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  literal.127: bits[32] = literal(value=1116352408, id=127, pos=[(1,56,9)])
  literal.128: bits[32] = literal(value=1899447441, id=128, pos=[(1,56,25)])
  literal.129: bits[32] = literal(value=3049323471, id=129, pos=[(1,56,41)])
  literal.130: bits[32] = literal(value=3921009573, id=130, pos=[(1,56,57)])
  literal.131: bits[32] = literal(value=961987163, id=131, pos=[(1,57,9)])
  literal.132: bits[32] = literal(value=1508970993, id=132, pos=[(1,57,25)])
  literal.133: bits[32] = literal(value=2453635748, id=133, pos=[(1,57,41)])
  literal.134: bits[32] = literal(value=2870763221, id=134, pos=[(1,57,57)])
  literal.135: bits[32] = literal(value=3624381080, id=135, pos=[(1,58,9)])
  literal.136: bits[32] = literal(value=310598401, id=136, pos=[(1,58,25)])
  literal.137: bits[32] = literal(value=607225278, id=137, pos=[(1,58,41)])
  literal.138: bits[32] = literal(value=1426881987, id=138, pos=[(1,58,57)])
  literal.139: bits[32] = literal(value=1925078388, id=139, pos=[(1,59,9)])
  literal.140: bits[32] = literal(value=2162078206, id=140, pos=[(1,59,25)])
  literal.141: bits[32] = literal(value=2614888103, id=141, pos=[(1,59,41)])
  literal.142: bits[32] = literal(value=3248222580, id=142, pos=[(1,59,57)])
  literal.143: bits[32] = literal(value=3835390401, id=143, pos=[(1,60,9)])
  literal.144: bits[32] = literal(value=4022224774, id=144, pos=[(1,60,25)])
  literal.145: bits[32] = literal(value=264347078, id=145, pos=[(1,60,41)])
  literal.146: bits[32] = literal(value=604807628, id=146, pos=[(1,60,57)])
  literal.147: bits[32] = literal(value=770255983, id=147, pos=[(1,61,9)])
  literal.148: bits[32] = literal(value=1249150122, id=148, pos=[(1,61,25)])
  literal.149: bits[32] = literal(value=1555081692, id=149, pos=[(1,61,41)])
  literal.150: bits[32] = literal(value=1996064986, id=150, pos=[(1,61,57)])
  literal.151: bits[32] = literal(value=2554220882, id=151, pos=[(1,62,9)])
  literal.152: bits[32] = literal(value=2821834349, id=152, pos=[(1,62,25)])
  literal.153: bits[32] = literal(value=2952996808, id=153, pos=[(1,62,41)])
  literal.154: bits[32] = literal(value=3210313671, id=154, pos=[(1,62,57)])
  literal.155: bits[32] = literal(value=3336571891, id=155, pos=[(1,63,9)])
  literal.156: bits[32] = literal(value=3584528711, id=156, pos=[(1,63,25)])
  literal.157: bits[32] = literal(value=113926993, id=157, pos=[(1,63,41)])
  literal.158: bits[32] = literal(value=338241895, id=158, pos=[(1,63,57)])
  literal.159: bits[32] = literal(value=666307205, id=159, pos=[(1,64,9)])
  literal.160: bits[32] = literal(value=773529912, id=160, pos=[(1,64,25)])
  literal.161: bits[32] = literal(value=1294757372, id=161, pos=[(1,64,41)])
  literal.162: bits[32] = literal(value=1396182291, id=162, pos=[(1,64,57)])
  literal.163: bits[32] = literal(value=1695183700, id=163, pos=[(1,65,9)])
  literal.164: bits[32] = literal(value=1986661051, id=164, pos=[(1,65,25)])
  literal.165: bits[32] = literal(value=2177026350, id=165, pos=[(1,65,41)])
  literal.166: bits[32] = literal(value=2456956037, id=166, pos=[(1,65,57)])
  literal.167: bits[32] = literal(value=2730485921, id=167, pos=[(1,66,9)])
  literal.168: bits[32] = literal(value=2820302411, id=168, pos=[(1,66,25)])
  literal.169: bits[32] = literal(value=3259730800, id=169, pos=[(1,66,41)])
  literal.170: bits[32] = literal(value=3345764771, id=170, pos=[(1,66,57)])
  literal.171: bits[32] = literal(value=3516065817, id=171, pos=[(1,67,9)])
  literal.172: bits[32] = literal(value=3600352804, id=172, pos=[(1,67,25)])
  literal.173: bits[32] = literal(value=4094571909, id=173, pos=[(1,67,41)])
  literal.174: bits[32] = literal(value=275423344, id=174, pos=[(1,67,57)])
  literal.175: bits[32] = literal(value=430227734, id=175, pos=[(1,68,9)])
  literal.176: bits[32] = literal(value=506948616, id=176, pos=[(1,68,25)])
  literal.177: bits[32] = literal(value=659060556, id=177, pos=[(1,68,41)])
  literal.178: bits[32] = literal(value=883997877, id=178, pos=[(1,68,57)])
  literal.179: bits[32] = literal(value=958139571, id=179, pos=[(1,69,9)])
  literal.180: bits[32] = literal(value=1322822218, id=180, pos=[(1,69,25)])
  literal.181: bits[32] = literal(value=1537002063, id=181, pos=[(1,69,41)])
  literal.182: bits[32] = literal(value=1747873779, id=182, pos=[(1,69,57)])
  literal.183: bits[32] = literal(value=1955562222, id=183, pos=[(1,70,9)])
  literal.184: bits[32] = literal(value=2024104815, id=184, pos=[(1,70,25)])
  literal.185: bits[32] = literal(value=2227730452, id=185, pos=[(1,70,41)])
  literal.186: bits[32] = literal(value=2361852424, id=186, pos=[(1,70,57)])
  literal.187: bits[32] = literal(value=2428436474, id=187, pos=[(1,71,9)])
  literal.188: bits[32] = literal(value=2756734187, id=188, pos=[(1,71,25)])
  literal.189: bits[32] = literal(value=3204031479, id=189, pos=[(1,71,41)])
  literal.190: bits[32] = literal(value=3329325298, id=190, pos=[(1,71,57)])
  K: bits[32][64] = array(literal.127, literal.128, literal.129, literal.130, literal.131, literal.132, literal.133, literal.134, literal.135, literal.136, literal.137, literal.138, literal.139, literal.140, literal.141, literal.142, literal.143, literal.144, literal.145, literal.146, literal.147, literal.148, literal.149, literal.150, literal.151, literal.152, literal.153, literal.154, literal.155, literal.156, literal.157, literal.158, literal.159, literal.160, literal.161, literal.162, literal.163, literal.164, literal.165, literal.166, literal.167, literal.168, literal.169, literal.170, literal.171, literal.172, literal.173, literal.174, literal.175, literal.176, literal.177, literal.178, literal.179, literal.180, literal.181, literal.182, literal.183, literal.184, literal.185, literal.186, literal.187, literal.188, literal.189, literal.190, id=191, pos=[(1,55,20)])
  w: bits[32][64] = invoke(chunk, to_apply=__sha256__sha256_chunk_w_table, id=126, pos=[(1,52,39)])
  counted_for.266: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = counted_for(digest_init, trip_count=64, stride=1, body=____sha256__sha256_chunk_counted_for_0_body, invariant_args=[K, w], id=266)
  h0: bits[32] = tuple_index(digest_init, index=0, id=275, pos=[(1,91,7)])
  a: bits[32] = tuple_index(counted_for.266, index=0, id=267, pos=[(1,75,7)])
  h1: bits[32] = tuple_index(digest_init, index=1, id=276, pos=[(1,91,11)])
  b: bits[32] = tuple_index(counted_for.266, index=1, id=268, pos=[(1,75,10)])
  h2: bits[32] = tuple_index(digest_init, index=2, id=277, pos=[(1,91,15)])
  c: bits[32] = tuple_index(counted_for.266, index=2, id=269, pos=[(1,75,13)])
  h3: bits[32] = tuple_index(digest_init, index=3, id=278, pos=[(1,91,19)])
  d: bits[32] = tuple_index(counted_for.266, index=3, id=270, pos=[(1,75,16)])
  h4: bits[32] = tuple_index(digest_init, index=4, id=279, pos=[(1,91,23)])
  e: bits[32] = tuple_index(counted_for.266, index=4, id=271, pos=[(1,75,19)])
  h5: bits[32] = tuple_index(digest_init, index=5, id=280, pos=[(1,91,27)])
  f: bits[32] = tuple_index(counted_for.266, index=5, id=272, pos=[(1,75,22)])
  h6: bits[32] = tuple_index(digest_init, index=6, id=281, pos=[(1,91,31)])
  g: bits[32] = tuple_index(counted_for.266, index=6, id=273, pos=[(1,75,25)])
  h7: bits[32] = tuple_index(digest_init, index=7, id=282, pos=[(1,91,35)])
  h: bits[32] = tuple_index(counted_for.266, index=7, id=274, pos=[(1,75,28)])
  add.283: bits[32] = add(h0, a, id=283, pos=[(1,92,6)])
  add.284: bits[32] = add(h1, b, id=284, pos=[(1,92,14)])
  add.285: bits[32] = add(h2, c, id=285, pos=[(1,92,22)])
  add.286: bits[32] = add(h3, d, id=286, pos=[(1,92,30)])
  add.287: bits[32] = add(h4, e, id=287, pos=[(1,92,38)])
  add.288: bits[32] = add(h5, f, id=288, pos=[(1,92,46)])
  add.289: bits[32] = add(h6, g, id=289, pos=[(1,92,53)])
  add.290: bits[32] = add(h7, h, id=290, pos=[(1,92,60)])
  ret tuple.291: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(add.283, add.284, add.285, add.286, add.287, add.288, add.289, add.290, id=291, pos=[(1,92,2)])
}

fn __sha256__sha256(message: bits[512]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  literal.293: bits[32] = literal(value=1779033703, id=293, pos=[(1,121,9)])
  literal.294: bits[32] = literal(value=3144134277, id=294, pos=[(1,121,25)])
  literal.295: bits[32] = literal(value=1013904242, id=295, pos=[(1,121,41)])
  literal.296: bits[32] = literal(value=2773480762, id=296, pos=[(1,121,57)])
  literal.297: bits[32] = literal(value=1359893119, id=297, pos=[(1,122,9)])
  literal.298: bits[32] = literal(value=2600822924, id=298, pos=[(1,122,25)])
  literal.299: bits[32] = literal(value=528734635, id=299, pos=[(1,122,41)])
  literal.300: bits[32] = literal(value=1541459225, id=300, pos=[(1,122,57)])
  digest_init: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = tuple(literal.293, literal.294, literal.295, literal.296, literal.297, literal.298, literal.299, literal.300, id=301, pos=[(1,121,4)])
  ret invoke.302: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = invoke(message, digest_init, to_apply=__sha256__sha256_chunk, id=302, pos=[(1,131,14)])
}

top fn __sha256__main(message: bits[512]) -> (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) {
  ret invoke.304: (bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32], bits[32]) = invoke(message, to_apply=__sha256__sha256, id=304, pos=[(1,135,8)])
}
