package adler32

file_number 0 "./work_space/adler32/adler32.x"

top fn __adler32__main(message: bits[8]) -> bits[32] {
  literal.94: bits[1] = literal(value=0, id=94, pos=[(0,29,13)])
  concat.93: bits[9] = concat(literal.94, message, id=93, pos=[(0,29,13)])
  literal.108: bits[9] = literal(value=1, id=108, pos=[(0,29,13)])
  literal.90: bits[23] = literal(value=0, id=90, pos=[(0,21,15)])
  add.121: bits[9] = add(concat.93, literal.108, id=121, pos=[(0,29,13)])
  concat.91: bits[32] = concat(literal.90, add.121, id=91, pos=[(0,21,15)])
  literal.68: bits[32] = literal(value=65521, id=68, pos=[(0,21,37)])
  umod.70: bits[32] = umod(concat.91, literal.68, id=70, pos=[(0,21,31)])
  literal.122: bits[32] = literal(value=65521, id=122, pos=[(0,21,37)])
  umod.72: bits[32] = umod(umod.70, literal.122, id=72, pos=[(0,22,20)])
  bit_slice.75: bits[16] = bit_slice(umod.72, start=0, width=16, id=75, pos=[(0,25,5)])
  literal.76: bits[16] = literal(value=0, id=76, pos=[(0,25,5)])
  concat.77: bits[32] = concat(bit_slice.75, literal.76, id=77, pos=[(0,25,5)])
  ret or.80: bits[32] = or(concat.77, umod.70, id=80, pos=[(0,25,16)])
}

block xls_test(clk: clock, message: bits[8], out: bits[32]) {
  reg p0_message(bits[8])
  reg p1_umod_133(bits[32])
  reg p2_or_141(bits[32])
  message: bits[8] = input_port(name=message, id=123)
  register_write.124: () = register_write(message, register=p0_message, id=124)
  p0_message: bits[8] = register_read(register=p0_message, id=125)
  literal.126: bits[1] = literal(value=0, id=126, pos=[(0,29,13)])
  concat.127: bits[9] = concat(literal.126, p0_message, id=127, pos=[(0,29,13)])
  literal.128: bits[9] = literal(value=1, id=128, pos=[(0,29,13)])
  literal.129: bits[23] = literal(value=0, id=129, pos=[(0,21,15)])
  add.130: bits[9] = add(concat.127, literal.128, id=130, pos=[(0,29,13)])
  concat.131: bits[32] = concat(literal.129, add.130, id=131, pos=[(0,21,15)])
  literal.132: bits[32] = literal(value=65521, id=132, pos=[(0,21,37)])
  umod.133: bits[32] = umod(concat.131, literal.132, id=133, pos=[(0,21,31)])
  register_write.134: () = register_write(umod.133, register=p1_umod_133, id=134, pos=[(0,21,31)])
  p1_umod_133: bits[32] = register_read(register=p1_umod_133, id=135, pos=[(0,21,31)])
  literal.136: bits[32] = literal(value=65521, id=136, pos=[(0,21,37)])
  umod.137: bits[32] = umod(p1_umod_133, literal.136, id=137, pos=[(0,22,20)])
  bit_slice.138: bits[16] = bit_slice(umod.137, start=0, width=16, id=138, pos=[(0,25,5)])
  literal.139: bits[16] = literal(value=0, id=139, pos=[(0,25,5)])
  concat.140: bits[32] = concat(bit_slice.138, literal.139, id=140, pos=[(0,25,5)])
  or.141: bits[32] = or(concat.140, p1_umod_133, id=141, pos=[(0,25,16)])
  register_write.142: () = register_write(or.141, register=p2_or_141, id=142, pos=[(0,25,16)])
  p2_or_141: bits[32] = register_read(register=p2_or_141, id=143, pos=[(0,25,16)])
  out: () = output_port(p2_or_141, name=out, id=144)
}
