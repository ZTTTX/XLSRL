package adler32

file_number 0 "./work_space/adler32/adler32.x"

top fn __adler32__main(message: bits[8]) -> bits[32] {
  literal.94: bits[1] = literal(value=0, id=94, pos=[(0,29,13)])
  concat.93: bits[9] = concat(literal.94, message, id=93, pos=[(0,29,13)])
  literal.108: bits[9] = literal(value=1, id=108, pos=[(0,29,13)])
  literal.90: bits[23] = literal(value=0, id=90, pos=[(0,21,15)])
  add.109: bits[9] = add(concat.93, literal.108, id=109, pos=[(0,29,13)])
  concat.91: bits[32] = concat(literal.90, add.109, id=91, pos=[(0,21,15)])
  literal.68: bits[32] = literal(value=65521, id=68, pos=[(0,21,37)])
  umod.70: bits[32] = umod(concat.91, literal.68, id=70, pos=[(0,21,31)])
  literal.120: bits[32] = literal(value=65521, id=120, pos=[(0,21,37)])
  umod.72: bits[32] = umod(umod.70, literal.120, id=72, pos=[(0,22,20)])
  bit_slice.75: bits[16] = bit_slice(umod.72, start=0, width=16, id=75, pos=[(0,25,5)])
  literal.76: bits[16] = literal(value=0, id=76, pos=[(0,25,5)])
  concat.77: bits[32] = concat(bit_slice.75, literal.76, id=77, pos=[(0,25,5)])
  ret or.80: bits[32] = or(concat.77, umod.70, id=80, pos=[(0,25,16)])
}

block xls_test(clk: clock, message: bits[8], out: bits[32]) {
  reg p0_message(bits[8])
  reg p1_add_127(bits[9])
  reg p2_umod_133(bits[32])
  reg p3_umod_133(bits[32])
  reg p3_bit_slice_138(bits[16])
  reg p4_or_145(bits[32])
  message: bits[8] = input_port(name=message, id=121)
  register_write.122: () = register_write(message, register=p0_message, id=122)
  p0_message: bits[8] = register_read(register=p0_message, id=123)
  literal.124: bits[1] = literal(value=0, id=124, pos=[(0,29,13)])
  concat.125: bits[9] = concat(literal.124, p0_message, id=125, pos=[(0,29,13)])
  literal.126: bits[9] = literal(value=1, id=126, pos=[(0,29,13)])
  add.127: bits[9] = add(concat.125, literal.126, id=127, pos=[(0,29,13)])
  register_write.128: () = register_write(add.127, register=p1_add_127, id=128, pos=[(0,29,13)])
  p1_add_127: bits[9] = register_read(register=p1_add_127, id=129, pos=[(0,29,13)])
  literal.130: bits[23] = literal(value=0, id=130, pos=[(0,21,15)])
  concat.131: bits[32] = concat(literal.130, p1_add_127, id=131, pos=[(0,21,15)])
  literal.132: bits[32] = literal(value=65521, id=132, pos=[(0,21,37)])
  umod.133: bits[32] = umod(concat.131, literal.132, id=133, pos=[(0,21,31)])
  register_write.134: () = register_write(umod.133, register=p2_umod_133, id=134, pos=[(0,21,31)])
  p2_umod_133: bits[32] = register_read(register=p2_umod_133, id=135, pos=[(0,21,31)])
  literal.136: bits[32] = literal(value=65521, id=136, pos=[(0,21,37)])
  umod.137: bits[32] = umod(p2_umod_133, literal.136, id=137, pos=[(0,22,20)])
  bit_slice.138: bits[16] = bit_slice(umod.137, start=0, width=16, id=138, pos=[(0,25,5)])
  register_write.139: () = register_write(p2_umod_133, register=p3_umod_133, id=139, pos=[(0,21,31)])
  register_write.141: () = register_write(bit_slice.138, register=p3_bit_slice_138, id=141, pos=[(0,25,5)])
  p3_umod_133: bits[32] = register_read(register=p3_umod_133, id=140, pos=[(0,21,31)])
  p3_bit_slice_138: bits[16] = register_read(register=p3_bit_slice_138, id=142, pos=[(0,25,5)])
  literal.143: bits[16] = literal(value=0, id=143, pos=[(0,25,5)])
  concat.144: bits[32] = concat(p3_bit_slice_138, literal.143, id=144, pos=[(0,25,5)])
  or.145: bits[32] = or(concat.144, p3_umod_133, id=145, pos=[(0,25,16)])
  register_write.146: () = register_write(or.145, register=p4_or_145, id=146, pos=[(0,25,16)])
  p4_or_145: bits[32] = register_read(register=p4_or_145, id=147, pos=[(0,25,16)])
  out: () = output_port(p4_or_145, name=out, id=148)
}
