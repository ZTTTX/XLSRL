package my_package

file_number 1 "././work_space/test.cc"

top fn AddAssociativity(x1: bits[32], y1: bits[32], z1: bits[32]) -> bits[32] {
  add.38: bits[32] = add(z1, y1, id=38)
  ret add.39: bits[32] = add(x1, add.38, id=39)
}

fn Unsigned_MulAssociativity(x2: bits[32], y2: bits[32], z2: bits[32]) -> bits[32] {
  umul.42: bits[32] = umul(z2, y2, id=42)
  ret umul.43: bits[32] = umul(x2, umul.42, id=43)
}

fn MulDistribution(x3: bits[32], y3: bits[32], z3: bits[32]) -> bits[32] {
  umul.47: bits[32] = umul(y3, z3, id=47)
  umul.46: bits[32] = umul(y3, x3, id=46)
  ret add.48: bits[32] = add(umul.47, umul.46, id=48)
}

fn SumSame(x4: bits[32]) -> bits[32] {
  literal.51: bits[2] = literal(value=2, id=51)
  ret umul.52: bits[32] = umul(x4, literal.51, id=52)
}

fn MulSumSame(x5: bits[32], y5: bits[32], z5: bits[32]) -> bits[32] {
  literal.54: bits[32] = literal(value=1, id=54)
  umul.8: bits[32] = umul(x5, y5, id=8)
  add.55: bits[32] = add(x5, literal.54, id=55)
  add.9: bits[32] = add(umul.8, z5, id=9)
  ret umul.56: bits[32] = umul(add.55, y5, id=56)
}

fn Signed_MulAssociativity(x6: bits[32], y6: bits[32], z6: bits[32]) -> bits[32] {
  smul.59: bits[32] = smul(z6, y6, id=59)
  ret smul.60: bits[32] = smul(x6, smul.59, id=60)
}

fn SubToNeg(x7: bits[32], y7: bits[32]) -> bits[32] {
  neg.63: bits[32] = neg(y7, id=63)
  ret add.64: bits[32] = add(x7, neg.63, id=64)
}

fn MulByTwo(x8: bits[32]) -> bits[32] {
  literal.15: bits[8] = literal(value=4, id=15)
  literal.66: bits[1] = literal(value=1, id=66)
  umul.16: bits[32] = umul(x8, literal.15, id=16)
  ret shll.67: bits[32] = shll(x8, literal.66, id=67)
}
